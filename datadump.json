[{"model": "contenttypes.contenttype", "fields": {"app_label": "admin", "model": "logentry"}}, {"model": "contenttypes.contenttype", "fields": {"app_label": "auth", "model": "group"}}, {"model": "contenttypes.contenttype", "fields": {"app_label": "auth", "model": "permission"}}, {"model": "contenttypes.contenttype", "fields": {"app_label": "auth", "model": "user"}}, {"model": "contenttypes.contenttype", "fields": {"app_label": "contenttypes", "model": "contenttype"}}, {"model": "contenttypes.contenttype", "fields": {"app_label": "sessions", "model": "session"}}, {"model": "contenttypes.contenttype", "fields": {"app_label": "mainsite", "model": "project"}}, {"model": "contenttypes.contenttype", "fields": {"app_label": "blog", "model": "tag"}}, {"model": "contenttypes.contenttype", "fields": {"app_label": "blog", "model": "blog"}}, {"model": "sessions.session", "pk": "29n7yux2fudf4gxardebzji5pu96mnxs", "fields": {"session_data": "YmQ1MzZlZjU0MDQ5NTEwNzA3Yjc5MzZkZjU1ZDJjNzNjY2Y2YWFhYjp7Il9hdXRoX3VzZXJfaWQiOiIxIiwiX2F1dGhfdXNlcl9iYWNrZW5kIjoiZGphbmdvLmNvbnRyaWIuYXV0aC5iYWNrZW5kcy5Nb2RlbEJhY2tlbmQiLCJfYXV0aF91c2VyX2hhc2giOiIxMTEyMTFkMDY0YmMwOTE2MzI2ZjE2YjAwMGI2ZmUxNDk2YTVjMmI1In0=", "expire_date": "2017-03-29T18:55:15.480Z"}}, {"model": "sessions.session", "pk": "9f8jmkmp9hmzmyerdqfmbb51xpyawd26", "fields": {"session_data": "ZmFhOTM2YTM2OTZkMDg0NzRjZWU1MzcwNGFkNTNjMWFlMGU1NTIyYzp7Il9hdXRoX3VzZXJfaWQiOiIxIiwiX2F1dGhfdXNlcl9oYXNoIjoiMTExMjExZDA2NGJjMDkxNjMyNmYxNmIwMDBiNmZlMTQ5NmE1YzJiNSIsIl9hdXRoX3VzZXJfYmFja2VuZCI6ImRqYW5nby5jb250cmliLmF1dGguYmFja2VuZHMuTW9kZWxCYWNrZW5kIn0=", "expire_date": "2017-03-17T01:35:00.259Z"}}, {"model": "sessions.session", "pk": "kuft7zles9wrnu1zwqy9go6x3yq8hhh5", "fields": {"session_data": "NmYzNWNiOWUzMmQyZDg3NmMxOGM2ZjIyOWQxZjBkYzVlNzk3NjQyMzp7Il9hdXRoX3VzZXJfaGFzaCI6IjNlNWU4ZDNhODE1MWJjMWVhZDJlNmM5MDU5ZGU3ZjY2NTc2Y2M2OWUiLCJfYXV0aF91c2VyX2lkIjoiMSIsIl9hdXRoX3VzZXJfYmFja2VuZCI6ImRqYW5nby5jb250cmliLmF1dGguYmFja2VuZHMuTW9kZWxCYWNrZW5kIn0=", "expire_date": "2017-02-12T11:23:37.608Z"}}, {"model": "mainsite.project", "pk": 1, "fields": {"project_name": "Yeller", "img_url": "https://unsplash.it/200/300?image=0", "repo_url": "http://github.com/amcorvi", "project_url": "http://projects.corvi.dev/", "description": "enophysella is a genus of moss bug (Peloridiidae). The type species is Xenophysella stewartensis,[1] formerly Xenophyes stewartensis found only on Stewart Island, off New Zealand.[2]", "technologies": "react, django , javascript"}}, {"model": "blog.tag", "pk": 1, "fields": {"tag_name": "javascript,"}}, {"model": "blog.tag", "pk": 2, "fields": {"tag_name": "react"}}, {"model": "blog.tag", "pk": 3, "fields": {"tag_name": "otherstuff"}}, {"model": "blog.tag", "pk": 4, "fields": {"tag_name": "django"}}, {"model": "blog.blog", "pk": 1, "fields": {"author": "AMCorvi", "post_title": "Test 2", "post_content": "<h1> Talk thing </h1>", "date_create": "2017-01-29T11:24:58Z", "img_url": "http://unsplash.it/1000/1000/?image=88", "tags": [1, 2, 3, 4]}}, {"model": "blog.blog", "pk": 2, "fields": {"author": "Rihan", "post_title": "Call, Apply, Bind", "post_content": "Much of Django's infrastructure is hosted on GitHub, or uses a GitHub login. To log a ticket, or add content to this wiki, log in with a GitHub account. (You may also \u200bcreate a DjangoProject account and log in with that account.)\r\n\r\nOnce you've logged in with your GitHub account, please read \u200bour contribution guide. This document describes how the Django community works, and the various ways you can contribute. If this document doesn't answer your questions, please file a bug!\r\n\r\nIf you've read that document, and are looking for a way to contribute, why not try one of the following:\r\n\r\nTickets: View active tickets, make bug reports and contribute feature requests. If your bug report is a security issue, DO NOT report it with a ticket. Please read our \u200bguide to reporting security issues.\r\n\"Easy Pickings\" Tickets: Work on simple tickets to get familiar with Django's code base and the contribution process.\r\nDjangoDesign: Are you a designer rather than a coder? We still want your input. Let us know how we can improve on Django's visual/UX design.", "date_create": "2017-01-29T11:27:11Z", "img_url": "https://unsplash.it/1000/1000/?image=120", "tags": [2, 4]}}, {"model": "blog.blog", "pk": 3, "fields": {"author": "AMCorvi", "post_title": "Promises", "post_content": "Contribution Guide\r\nYou'd like to contribute to Django but don't know how? This document will explain our process and how to get involved.\r\n\"Easy Pickings\"\r\nFirst time contributor and you're looking for something manageable? The \"easy pickings\" list is a good start.\r\nSecurity Policy\r\nYou found a security issue in Django? You'd like to know more about our security policy? It's all in there.\r\nGitHub\r\nWant to peek under the hood and see Django's source code, file or help review a pull request? It's all on GitHub.\r\nDjango Dashboard\r\nConfused about Trac's filtering system? This dashboard shows easy-to-read metrics and has links to pre-set filters to get you started.", "date_create": "2017-01-29T11:28:01Z", "img_url": "https://unsplash.it/1000/1000?image=0", "tags": [2]}}, {"model": "blog.blog", "pk": 4, "fields": {"author": "AMCorvi", "post_title": "Factory Functions", "post_content": "<!--Javascript is different. We all kind of know that, and for many  the javascript profile is judge \u2018Hot\u2019 or \u2018Not\u2019 sole based on that feature.\r\nNow the reality is that all language are different, that is why they exist. However, javascript is that special kind of different. \r\nThe Elon Musk of all the siblings kind of different ( or Stephen Baldwin depending on who\u2019s making the assesment ).\r\nBut javascript is different namely because it is formulated to solve a drastically different problem. \r\nSo with all the build configuration and dependencies voodoo that seems to be the current state of javascript and Node.js  aside we should lean on the unique of javascript to solve not the web but enigma that is javasciprt itself.\r\n Now with the motivational JS pep talk out of the way let me discuss class. -->\r\n\r\n\r\n# Factory Functions\r\n\r\nIn languages such as Java, C# and some other languages there is only one way appropriate way to instantiate an object. \r\nHowever because javascript is the odd child this creates a few reasons to be weary about letting javascript play with `Classes`.\r\n Let me explain. \r\n\r\n```javascript\r\n\r\nclass Armor { \r\n    constructor(){\r\n        this.superheroName = 'Iron Man'\r\n        this.power = 'plasma'\r\n    }\r\n\r\n    activate(){\r\n        console.log(` A wild ${this.superHeroName} has appeared! ` );\r\n    }\r\n    \r\n    fires(){\r\n        console.log(\r\n            `${this.superheroName} shoots ${this.power} at enemy` );\r\n    }\r\n}\r\n\r\nconst tony_stark = new Armor()\r\n\r\ntony_stark.activate() // Outputs: \"\u02db A wild Iron Man has appeared! \" \r\ntony_stark.fires() // Outputs: \"Iron Man shoots plasma at enemy\" \r\n    \r\n\r\n```\r\n\r\n Here is a particulary mundane class. The class ( which in this case a super ability ) has a constructor and two methods 'activate' and 'fires'. \r\n We this code creates an instance of the Armor ablilty declared as the variable 'tony_stark. \r\n  \r\n *Note: Given the underlying nature of javascripts prototypical object creation this is not an instance in the strict sense  howeever, further definition is a seperate topic which should be researched if it is not understood already. For the sake of the blog we will assume this to be an instance in the traditional sense of the word.*\r\n\r\nAfter declaring the new instance of Armor we call both available methods consecutively. The methods then output the template strings in an expected way. \r\n\r\nThis would generally be fine however there are problems with when we take into account javascript's design. For example take this: \r\n\r\n``` javascript\r\n$(div.newMovie).dblclick(tony_stark.fires())\r\n```\r\n\r\nIn the case of this snippet the code breaks. The code breaks because by the nature of 'Class' style instantiation the instance variables declared in the constructor ( `this.superheroName` & `this.power` ) lose context. Given the matter by which the `this` keyword works when call in an event handler as shown above the `this` will refer to the window element rather than the Armour. Simply put if the code is written that way when we double-click we the template string will call refer to `window.superheroName` and `window.power` instead of `Armour.superheroName` and `Armour.power`\r\n\r\n Such an issue can be fixed in the the normal weird javascript way by re-writing the code like so...\r\n\r\n```javascript\r\n$(div.newMovie).dblclick(tony_stark.fires.bind(this))\r\n```\r\n\r\nOr like so ...  \r\n\r\n```javascript\r\n//Using ES6 arrow functions\r\n$(div.newMovie).dblclick( () => tony_stark.fires )\r\n```\r\n\r\n## Barely passing\r\n\r\n   This is a adequate, and quite common solutions... but it feels janky like really janky. Often time ( especially when written many times in a session ) `.bind(this)` feels like one of those 'fixes but not fixes'. Like passing an exam with a 65%. Or like fixing a constantly shutting window by putting a book in it to wedge it open. Even more so when the reference you trying to circumvent isn't even a DOM Element. \r\n\r\nBut there is a hope. \r\n\r\nAs said before in many langauges class are the only means to instantiate an object or dictate ( or express inheritance ). However, in javascript there is often another way. \r\n\r\n## Factory Functions \r\n\r\nLet's try this again but written as a factory function. \r\n\r\n``` javascript\r\n//Using ES6\r\nconst armour  = () => {\r\n     const superheroName = \"Iron Man\" ;\r\n     const power = \"plasma\" \r\n     return {\r\n\r\n         activate: () => {\r\n             console.log(\r\n                 `A wild ${superHeroName} has appeared!` ); \r\n         },\r\n         fires: () => {\r\n             console.log(\r\n                `${superheroName} shoots ${power} at enemy` );\r\n         }\r\n\r\n     }\r\n} \r\n```\r\n\r\n\r\nSo here is the rundown. We have a function. Inside that function two local variables are declared `superheroName` and `power`. The function terminates with an `Object` being the return value. We create and instance of our Armoured superhero as such... \r\n\r\n``` javascript\r\nconst tony_stark = new armour()\r\n```\r\n\r\nand we call the 'methods' as such... \r\n\r\n``` javascript\r\ntony_stark.activate(); // Outputs: \"A wild Iron Man has appeared\" \r\ntony_stark.fires(); // Outputs: \"Iron Man shoots plasma at enemy\"\r\n```\r\n\r\nWhen a we instatiate objects in this way we resolve a lot of issues. Firstly,  our issue of variables losing context is rememdied because the `Object` being returned is making reference to variables called within the scope of the function. So...\r\n\r\n``` javascript\r\n$(div.newMovie).dblclick(tony_stark.fires()) \r\n// Works without needing to bind anymore \ud83c\udf89\ud83c\udf89\r\n```\r\n\r\nSecondly, creating instances using factory function is by far is much easier to reason about and makes changes far easier to implement down the road. Furthermore, the code is written in such a way that we are leveraging the javascript's unique behaviors in a way that make keeps the flow code simple and , in my opinions, easier to read. \r\n\r\n### Caveats\r\n\r\n**Factory Functions** have a mild draw back. ``Classes`` (those things you should still stop using now ) are indeed faster. comparitively they the instance as described above will talk around 0.0002s to run where a factory function is double that at 0.0004s. However unless you are literally attempting to write 1000 `Classes` per frame ( which in itself is a problem ) factory function are still the bette Option. \r\n\r\n## Conclusion\r\n    - Factory Function are a different way to create object in javascript and are better then ``Classes`` (they just are). \r\n    - They are less convaluted then `Classes`\r\n    - They utilize closure to prevent the need to use `this' or lose context when calling 'methods' elsewhere in your code. \r\n\r\n\r\n    Stay Frosty!!! \r\n\r\n\r\n### P.S. \r\n\r\nIt was mentioned that how the function works works may be a tad bit confusing. Especially to those newer to javascript. So lets consider this. \r\n\r\n``` javascript\r\n//First we create a factory function\r\nconst armour  = () => {\r\n     const superheroName = \"Iron Man\" ;\r\n     const power = \"plasma\" \r\n     return {\r\n\r\n         activate: () => {\r\n             console.log(\r\n                 `A wild ${superHeroName} has appeared!` ); \r\n         },\r\n         fires: () => {\r\n             console.log(\r\n                `${superheroName} shoots ${power} at enemy` );\r\n         }\r\n\r\n     }\r\n} \r\n\r\n//Next we declare a instance of that function. \r\n\r\nconst james_rhodes = new armour()\r\n\r\n/* \r\nBecause we a returning an object in the function. What we are esstianly creating via a function is this \r\n*/\r\n\r\nconst james_rhodes = {\r\n    activate: () => {\r\n             console.log(\r\n                 `A wild ${this.superHeroName} has appeared!` ); \r\n         },\r\n    fires: () => {\r\n        console.log(\r\n        `${this.superheroName} shoots ${this.power} at enemy` );\r\n    }\r\n\r\n    /*Note: That the function returns the values as refered to by the placeholders.\r\n     So that \"${this.superheroName}\" and  \"${this.power}\" are replaced with \r\n     \"War Machine\" and \"plasma\" respectivley. */\r\n\r\n}\r\n\r\n/* Everytime we create an instance of the `armour`  \r\nwe are essentially creating an object like the one above. \r\nOnly with a diffrent variable name. \r\nAnd like the object we can functions via dot notation as such */\r\n\r\njames_rhodes.fire()\r\n```", "date_create": "2017-01-29T11:28:30Z", "img_url": "https://unsplash.it/1000/1000/?image=10", "tags": [1, 3]}}, {"model": "blog.blog", "pk": 5, "fields": {"author": "AMCorvi", "post_title": "Yarn", "post_content": "## Yarn ##\r\n\r\nNot to long ago the Facebook released another open source project. This time we they delved into the javascript ecosystem not by flipping front-end architecture on it head. Neither did that release come out with another iteration  of a pre-existing language as they did some time ago with the [Hack](http://hacklang.org \"Hack\") language or [Dart](https://www.dartlang.org \"Dart\"). This go around the people at the girls and guys at Facebook attempted to modify something far more profound...Package Management!\r\n\r\nFor we who dare to javascript there are few things that matter more then packages. It is the catnip ( to be nice ) of the trade. There have been a few instances recently that have caused developers particularly in the JS community to question the nature and mean by which we use and rely on packages ( If you dont already know, read about the  [left-pad](https://www.google.com/url?sa=t&rct=j&q=&esrc=s&source=web&cd=4&cad=rja&uact=8&ved=0ahUKEwiMkrze-czRAhWmrVQKHaYRDb0QFggtMAM&url=http%3A%2F%2Fwww.theregister.co.uk%2F2016%2F03%2F23%2Fnpm_left_pad_chaos%2F&usg=AFQjCNH2IKdzhRXFTB6gFhn5CGldqWievw&sig2=5CwEOPYqb-pD4id5sYVPvA \"Left-Pad\") incident ). Nonetheless, how we inject dependencies is as import to the applications we write as the architecture we set to write them. \r\n\r\n\r\n NPM ( which as far as I'm concerned does indeed stand for Node Package Manager in lieu of no known alternative ) is the grand-master of dependency management. It was developed with the intention of creating proper package management for the javascript influenced by the shortcomings of many other attempts to tackle the same problems in other languages. It is packaged with Node.js by default in which the adjunct `cli` interfaces with remote registry of over 350K public packages. For the most part javascript gets the job and is a amazing resource. But as with all things it imperfection have many implication that often enough get in the way of what it was made. \r\n\r\n **Yarn** was created with specific to mend some of the fractures in NPM's otherwise solid structure. On projects , especially large ones, there can be a bottleneck with regard co-development that result directly from packages synchronization. Despite working from the the same `package.json` developers come across issues in with conflicting packages. Sometimes the issue is a result of the semantic versioning used in the 'package.json' files defaulting to different versions depending on the system and time of an `npm install` is created. In other instances problems arise a result of the order in which dependecies are loaded creates varying forms in which the code operates at runtime. This last instance is often the source of hard to track bugs and instances where two machines have differentiating behavior which only causes confusion. \r\n\r\n Remember that are meant to serve as a space saving mechanism via seperation of concerns. These issues with differentiating semver behavior, alternate dependency trees, not to mention human error create can have frustrating and sometimes costly ramifications.\r\n\r\n\r\n **Yarn** is a package management frame work that uses the same registery as good ol' fashion. However it was built in a way that removes the problems with non-determinisitic dependency integration.  This is done via lockfile that ensure consistent versioning and dependency tree structure. It does so in fashion that is simple and abstracted away and in way that exceeding `npm shrinkwrap` which was **NPM's** way of trying to resolve the same issue. ( and is also something that I rather like avoiding ). \r\n\r\n## The Essentials\r\nSimply put **Yarn** operates as such: \r\n\r\n- Yarn resolves dependencies recursivley looking up each dependency.\r\n- If it does not already have that file it downloads it and puts it in a global cache so it can work offline. \u00ac\u2020(\uf8ff\u00fc\u00eb\u00e0  *Hands down my favorite feature. and great alternative to [npmbox](https://www.npmjs.com/package/npmbox \"npmbox\"). )\r\n- Yarn then copies the required file from the global cache to the `node_modules` folder.\r\n\r\n*Note: The 'global cache' referred to above is a cache of all the files ever required by a yarn install in which all the dependecies are stored in a gzipped tarball - The cache can be cleared via the `yarn cache clean` command similar to the `npm cache clean` command in npm.*\r\n\r\n### Features \r\n * * *\r\n - **Yarn** features a super in clean interface for every installation.\r\n\r\n\r\n![Yarn Command-Line installation interface](https://scontent-lga3-1.xx.fbcdn.net/v/t39.2365-6/14658612_347000295637068_647258520764284928_n.gif?oh=68d7cd2be716fa572fcceb64fd598f0b&oe=596A8A1C)\r\n\r\n- It also utilizes the same `package.json` files that you already use in with **NPM** and Node.js. Furthermore, it also works with `bower.json` files as well\r\n\r\n- Lastly the `cli` utilizes a command structure quite similar to npm the commands use can be seen here. Also, be mindful that there is no `--save` as every  `yarn install` save files to the package.json ( or `bower.json` by default )\r\n     - Yarn commands as compared to npm can be found [Here](https://yarnpkg.com/en/docs/migrating-from-npm)\r\n\r\n\r\nIronically if you already have node installed yarn can be install via npm as follows: \r\n\r\n```bash\r\nnpm install -g yarn\r\n```\r\n\r\n*Note: As previously described `package.json` files work fine with **Yarn**. However, `packages.json` and `bower.json` files cannot be used with yarn at the same time. Also, not there are some outstanding issues with `bower.json` file loading dependencies as expected.", "date_create": "2017-03-15T20:46:19Z", "img_url": "http://payload70.cargocollective.com/1/1/54699/3717877/JJG_7208.jpg", "tags": [1, 3]}}, {"model": "auth.permission", "fields": {"name": "Can add log entry", "content_type": ["admin", "logentry"], "codename": "add_logentry"}}, {"model": "auth.permission", "fields": {"name": "Can change log entry", "content_type": ["admin", "logentry"], "codename": "change_logentry"}}, {"model": "auth.permission", "fields": {"name": "Can delete log entry", "content_type": ["admin", "logentry"], "codename": "delete_logentry"}}, {"model": "auth.permission", "fields": {"name": "Can add group", "content_type": ["auth", "group"], "codename": "add_group"}}, {"model": "auth.permission", "fields": {"name": "Can change group", "content_type": ["auth", "group"], "codename": "change_group"}}, {"model": "auth.permission", "fields": {"name": "Can delete group", "content_type": ["auth", "group"], "codename": "delete_group"}}, {"model": "auth.permission", "fields": {"name": "Can add permission", "content_type": ["auth", "permission"], "codename": "add_permission"}}, {"model": "auth.permission", "fields": {"name": "Can change permission", "content_type": ["auth", "permission"], "codename": "change_permission"}}, {"model": "auth.permission", "fields": {"name": "Can delete permission", "content_type": ["auth", "permission"], "codename": "delete_permission"}}, {"model": "auth.permission", "fields": {"name": "Can add user", "content_type": ["auth", "user"], "codename": "add_user"}}, {"model": "auth.permission", "fields": {"name": "Can change user", "content_type": ["auth", "user"], "codename": "change_user"}}, {"model": "auth.permission", "fields": {"name": "Can delete user", "content_type": ["auth", "user"], "codename": "delete_user"}}, {"model": "auth.permission", "fields": {"name": "Can add content type", "content_type": ["contenttypes", "contenttype"], "codename": "add_contenttype"}}, {"model": "auth.permission", "fields": {"name": "Can change content type", "content_type": ["contenttypes", "contenttype"], "codename": "change_contenttype"}}, {"model": "auth.permission", "fields": {"name": "Can delete content type", "content_type": ["contenttypes", "contenttype"], "codename": "delete_contenttype"}}, {"model": "auth.permission", "fields": {"name": "Can add session", "content_type": ["sessions", "session"], "codename": "add_session"}}, {"model": "auth.permission", "fields": {"name": "Can change session", "content_type": ["sessions", "session"], "codename": "change_session"}}, {"model": "auth.permission", "fields": {"name": "Can delete session", "content_type": ["sessions", "session"], "codename": "delete_session"}}, {"model": "auth.permission", "fields": {"name": "Can add project", "content_type": ["mainsite", "project"], "codename": "add_project"}}, {"model": "auth.permission", "fields": {"name": "Can change project", "content_type": ["mainsite", "project"], "codename": "change_project"}}, {"model": "auth.permission", "fields": {"name": "Can delete project", "content_type": ["mainsite", "project"], "codename": "delete_project"}}, {"model": "auth.permission", "fields": {"name": "Can add tag", "content_type": ["blog", "tag"], "codename": "add_tag"}}, {"model": "auth.permission", "fields": {"name": "Can change tag", "content_type": ["blog", "tag"], "codename": "change_tag"}}, {"model": "auth.permission", "fields": {"name": "Can delete tag", "content_type": ["blog", "tag"], "codename": "delete_tag"}}, {"model": "auth.permission", "fields": {"name": "Can add blog", "content_type": ["blog", "blog"], "codename": "add_blog"}}, {"model": "auth.permission", "fields": {"name": "Can change blog", "content_type": ["blog", "blog"], "codename": "change_blog"}}, {"model": "auth.permission", "fields": {"name": "Can delete blog", "content_type": ["blog", "blog"], "codename": "delete_blog"}}, {"model": "auth.user", "fields": {"password": "pbkdf2_sha256$36000$UL89niVcwf3G$qp9s6CUdvB15nwbu4+QjHuvsjO/TBOyajboi+3ekE0E=", "last_login": "2017-03-15T18:55:15.474Z", "is_superuser": true, "username": "amcorvi", "first_name": "", "last_name": "", "email": "amcorvi@icloud.com", "is_staff": true, "is_active": true, "date_joined": "2017-01-29T11:23:13.465Z", "groups": [], "user_permissions": []}}, {"model": "admin.logentry", "pk": 1, "fields": {"action_time": "2017-01-29T11:25:27.437Z", "user": ["amcorvi"], "content_type": ["blog", "tag"], "object_id": "1", "object_repr": "javascript,", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 2, "fields": {"action_time": "2017-01-29T11:25:38.474Z", "user": ["amcorvi"], "content_type": ["blog", "tag"], "object_id": "2", "object_repr": "react", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 3, "fields": {"action_time": "2017-01-29T11:25:49.879Z", "user": ["amcorvi"], "content_type": ["blog", "tag"], "object_id": "3", "object_repr": "otherstuff", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 4, "fields": {"action_time": "2017-01-29T11:25:55.638Z", "user": ["amcorvi"], "content_type": ["blog", "tag"], "object_id": "4", "object_repr": "django", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 5, "fields": {"action_time": "2017-01-29T11:26:07.394Z", "user": ["amcorvi"], "content_type": ["blog", "blog"], "object_id": "1", "object_repr": "Test 2", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 6, "fields": {"action_time": "2017-01-29T11:27:29.320Z", "user": ["amcorvi"], "content_type": ["blog", "blog"], "object_id": "2", "object_repr": "Call, Apply, Bind", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 7, "fields": {"action_time": "2017-01-29T11:28:12.858Z", "user": ["amcorvi"], "content_type": ["blog", "blog"], "object_id": "3", "object_repr": "Promises", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 8, "fields": {"action_time": "2017-01-29T11:28:39.943Z", "user": ["amcorvi"], "content_type": ["blog", "blog"], "object_id": "4", "object_repr": "Ten", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 9, "fields": {"action_time": "2017-01-29T11:30:43.982Z", "user": ["amcorvi"], "content_type": ["blog", "blog"], "object_id": "4", "object_repr": "Ten", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"post_content\"]}}]"}}, {"model": "admin.logentry", "pk": 10, "fields": {"action_time": "2017-01-29T11:32:19.158Z", "user": ["amcorvi"], "content_type": ["blog", "blog"], "object_id": "4", "object_repr": "Ten", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"post_content\"]}}]"}}, {"model": "admin.logentry", "pk": 11, "fields": {"action_time": "2017-03-03T01:39:11.283Z", "user": ["amcorvi"], "content_type": ["mainsite", "project"], "object_id": "1", "object_repr": "Yeller", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 12, "fields": {"action_time": "2017-03-15T18:56:47.489Z", "user": ["amcorvi"], "content_type": ["blog", "blog"], "object_id": "1", "object_repr": "Test 2", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"post_content\"]}}]"}}, {"model": "admin.logentry", "pk": 13, "fields": {"action_time": "2017-03-15T20:47:33.528Z", "user": ["amcorvi"], "content_type": ["blog", "blog"], "object_id": "5", "object_repr": "Yarn", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 14, "fields": {"action_time": "2017-03-15T21:44:06.907Z", "user": ["amcorvi"], "content_type": ["blog", "blog"], "object_id": "4", "object_repr": "Ten", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"author\", \"post_content\"]}}]"}}, {"model": "admin.logentry", "pk": 15, "fields": {"action_time": "2017-03-15T21:44:40.632Z", "user": ["amcorvi"], "content_type": ["blog", "blog"], "object_id": "4", "object_repr": "Factory Functions", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"post_title\"]}}]"}}, {"model": "admin.logentry", "pk": 16, "fields": {"action_time": "2017-03-15T21:57:36.328Z", "user": ["amcorvi"], "content_type": ["blog", "blog"], "object_id": "5", "object_repr": "Yarn", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"post_content\"]}}]"}}, {"model": "admin.logentry", "pk": 17, "fields": {"action_time": "2017-03-15T21:58:16.680Z", "user": ["amcorvi"], "content_type": ["blog", "blog"], "object_id": "5", "object_repr": "Yarn", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"post_content\"]}}]"}}, {"model": "admin.logentry", "pk": 18, "fields": {"action_time": "2017-03-15T22:08:01.113Z", "user": ["amcorvi"], "content_type": ["blog", "blog"], "object_id": "5", "object_repr": "Yarn", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"post_content\"]}}]"}}, {"model": "admin.logentry", "pk": 19, "fields": {"action_time": "2017-03-15T22:08:34.393Z", "user": ["amcorvi"], "content_type": ["blog", "blog"], "object_id": "5", "object_repr": "Yarn", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"post_content\"]}}]"}}, {"model": "admin.logentry", "pk": 20, "fields": {"action_time": "2017-03-15T22:08:58.748Z", "user": ["amcorvi"], "content_type": ["blog", "blog"], "object_id": "5", "object_repr": "Yarn", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"post_content\"]}}]"}}, {"model": "admin.logentry", "pk": 21, "fields": {"action_time": "2017-03-15T22:47:58.517Z", "user": ["amcorvi"], "content_type": ["blog", "blog"], "object_id": "5", "object_repr": "Yarn", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"post_content\"]}}]"}}, {"model": "admin.logentry", "pk": 22, "fields": {"action_time": "2017-03-17T05:26:06.971Z", "user": ["amcorvi"], "content_type": ["blog", "blog"], "object_id": "4", "object_repr": "Factory Functions", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"post_content\"]}}]"}}, {"model": "admin.logentry", "pk": 23, "fields": {"action_time": "2017-03-17T05:30:15.322Z", "user": ["amcorvi"], "content_type": ["blog", "blog"], "object_id": "4", "object_repr": "Factory Functions", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"post_content\"]}}]"}}, {"model": "admin.logentry", "pk": 24, "fields": {"action_time": "2017-03-17T05:31:53.690Z", "user": ["amcorvi"], "content_type": ["blog", "blog"], "object_id": "4", "object_repr": "Factory Functions", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"post_content\"]}}]"}}]